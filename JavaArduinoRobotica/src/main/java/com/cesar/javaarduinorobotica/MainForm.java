/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cesar.javaarduinorobotica;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 *
 * @author cesar
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    Arduino arduino = null;
    LinkedList<String> gravacao = new LinkedList<String>();

    public MainForm() {
        initComponents();
        arduino = new Arduino();
        abrir();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        valorBase = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        valorGarra = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        valorAltura = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        valorDistancia = new javax.swing.JSpinner();
        reproduzir = new javax.swing.JButton();
        gravar = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Base"));

        valorBase.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        valorBase.setModel(new javax.swing.SpinnerNumberModel(90, 0, 180, 5));
        valorBase.setEditor(new javax.swing.JSpinner.NumberEditor(valorBase, ""));
        valorBase.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valorBaseStateChanged(evt);
            }
        });
        jPanel1.add(valorBase);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Garra"));

        valorGarra.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        valorGarra.setModel(new javax.swing.SpinnerNumberModel(90, 0, 180, 5));
        valorGarra.setEditor(new javax.swing.JSpinner.NumberEditor(valorGarra, ""));
        valorGarra.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valorGarraStateChanged(evt);
            }
        });
        jPanel2.add(valorGarra);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Altura"));

        valorAltura.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        valorAltura.setModel(new javax.swing.SpinnerNumberModel(90, 0, 180, 5));
        valorAltura.setEditor(new javax.swing.JSpinner.NumberEditor(valorAltura, ""));
        valorAltura.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valorAlturaStateChanged(evt);
            }
        });
        jPanel3.add(valorAltura);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Distância"));

        valorDistancia.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        valorDistancia.setModel(new javax.swing.SpinnerNumberModel(90, 0, 180, 5));
        valorDistancia.setEditor(new javax.swing.JSpinner.NumberEditor(valorDistancia, ""));
        valorDistancia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valorDistanciaStateChanged(evt);
            }
        });
        jPanel4.add(valorDistancia);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jPanel4, gridBagConstraints);

        reproduzir.setText("Reproduzir");
        reproduzir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reproduzirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(reproduzir, gridBagConstraints);

        gravar.setText("Gravar");
        gravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gravarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(gravar, gridBagConstraints);

        setSize(new java.awt.Dimension(410, 330));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void valorBaseStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valorBaseStateChanged
        arduino.comunicacaoArduino(geraComando(ServoEnum.BASE.getIdentificador(), (int) valorBase.getValue(), gravar.isSelected()));
    }//GEN-LAST:event_valorBaseStateChanged

    private void valorDistanciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valorDistanciaStateChanged
        arduino.comunicacaoArduino(geraComando(ServoEnum.DISTANCIA.getIdentificador(), (int) valorDistancia.getValue(), gravar.isSelected()));
    }//GEN-LAST:event_valorDistanciaStateChanged

    private void valorGarraStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valorGarraStateChanged
        arduino.comunicacaoArduino(geraComando(ServoEnum.GARRA.getIdentificador(), (int) valorGarra.getValue(), gravar.isSelected()));
    }//GEN-LAST:event_valorGarraStateChanged

    private void valorAlturaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valorAlturaStateChanged
        arduino.comunicacaoArduino(geraComando(ServoEnum.ALTURA.getIdentificador(), (int) valorAltura.getValue(), gravar.isSelected()));
    }//GEN-LAST:event_valorAlturaStateChanged

    private void gravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gravarActionPerformed
        if (gravar.isSelected()) {
            iniciarGravacao();
        } else {
            pausarGravacao();
        }
    }//GEN-LAST:event_gravarActionPerformed

    private void reproduzirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproduzirActionPerformed
        if (gravacao.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Não existe gravação para reproduzir!");
        } else {
            try {
                reproduzir();
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao reproduzir:\n" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_reproduzirActionPerformed

    private String geraComando(String identificador, int valor, boolean gravar) {
        String comando = identificador + (String.format("%02d", valor));
        if (gravar) {
            gravacao.add(comando);
        }
        return comando;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton gravar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton reproduzir;
    private javax.swing.JSpinner valorAltura;
    private javax.swing.JSpinner valorBase;
    private javax.swing.JSpinner valorDistancia;
    private javax.swing.JSpinner valorGarra;
    // End of variables declaration//GEN-END:variables

    private void iniciarGravacao() {
        gravacao.clear();
        gravar.setText("Gravando");
        resetPosicao();
        
    }

    private void pausarGravacao() {
        gravar.setText("Gravar");
        salvar();
    }

    private void resetPosicao(){
        arduino.comunicacaoArduino(geraComando(ServoEnum.ALTURA.getIdentificador(), 90, false));
        arduino.comunicacaoArduino(geraComando(ServoEnum.BASE.getIdentificador(), 90, false));
        arduino.comunicacaoArduino(geraComando(ServoEnum.DISTANCIA.getIdentificador(), 90, false));
        arduino.comunicacaoArduino(geraComando(ServoEnum.GARRA.getIdentificador(), 90, false));
        valorAltura.setValue(90);
        valorBase.setValue(90);
        valorDistancia.setValue(90);
        valorGarra.setValue(90);
    }
    private void reproduzir() throws InterruptedException {
        resetPosicao();
        Thread.sleep(1000);
        for (String comando : gravacao) {
            arduino.comunicacaoArduino(comando);
            Thread.sleep(20);
        }
    }

    private void salvar() {
        try {
            FileOutputStream fileOut = new FileOutputStream("gravacao");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(gravacao);
            out.close();
            fileOut.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao salvar arquivo de gravação:\n" + e.getMessage());
        }
    }

    private void abrir() {
        try {
            if (new File("gravacao").exists()) {
                FileInputStream fileIn = new FileInputStream("gravacao");
                ObjectInputStream in = new ObjectInputStream(fileIn);
                gravacao = (LinkedList<String>) in.readObject();
                in.close();
                fileIn.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao abrir arquivo de gravação:\n" + e.getMessage());
        }
    }
}
